Q1. What happens when you initialize a repository? Why do you need to do it?

A1. When we initialize a new repository then a .git file is made that stores meta-data.
	We need to initialize a repository in order to start tracking the files using git.

Q2. How is the staging area different from the working directory and the repository? What value do you think it offers?

A2. Working directory is the directory on which we are currently working on and repository is a snapshot of the working
	directory at different points in time. Staging area is in intermediate stage which Git provides where files have to be
	added before they can be commited. If one adds a file which he did not intended to commit he can reset that, this provides
	more flexibility.

Q3. How can you use the staging area to make sure you have one commit per logical change?

A3. To check that we have only one commit per logical change we can use git diff --staged to check the difference between the
	staging area and the most recent commit. If there are more than one logical change per commit we can always discard that
	change and add it another commit.

Q4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A4. When we want to do some experimental change to the project but also want to keep a working version intact, git branch
	will be helpful in keeping the history organized. Branches would create a separete branch keeping the original(master)
	branch intact.

Q5. How do the diagrams help you visualize the branch structure?

A5. Diagrams help to visualize the branch structure by displaying distinctly the commits and their parent commits,
	making a graph which is very readable.

Q6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A6. The result of merging 2 branches together is a new commit that has two parent commits, and the changes in the 2 branches are
	merged. This new commit can be used to trace back to the old commits of boyh the branches. We represent it in the diagram this
	way because it helps to visualize the change the merge commit makes. 